{"ast":null,"code":"export default {\n  props: {\n    value: {\n      required: true\n    }\n  },\n  data() {\n    return {\n      isDragging: false,\n      imageResults: [] // Add this data property to store the received images and strings\n    };\n  },\n\n  computed: {\n    previewImg() {\n      if (this.value) {\n        return URL.createObjectURL(this.value);\n      }\n      return null;\n    }\n  },\n  methods: {\n    upload() {\n      this.$refs.file.click();\n    },\n    fileChange(e, isDrop = false) {\n      const file = isDrop ? e.dataTransfer.files[0] : e.target.files[0];\n      this.$emit(\"input\", file);\n    },\n    dragover(e) {\n      e.preventDefault();\n      this.isDragging = true;\n    },\n    dragleave() {\n      this.isDragging = false;\n    },\n    async drop(e) {\n      e.preventDefault();\n      this.fileChange(e, true);\n      this.isDragging = false;\n\n      // Sending the image to the Flask server\n      const formData = new FormData();\n      formData.append(\"image\", this.value);\n      try {\n        // Replace '/predict' with your server URL followed by the API endpoint\n        const response = await fetch(\"https://my-image-server.com/predict\", {\n          method: \"POST\",\n          body: formData\n        });\n        if (response.ok) {\n          const data = await response.json();\n          // Update the component's data with the received images and strings\n          this.imageResults = data;\n        } else {\n          console.error(\"Error uploading image:\", response.statusText);\n        }\n      } catch (error) {\n        console.error(\"Error uploading image:\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["props","value","required","data","isDragging","imageResults","computed","previewImg","URL","createObjectURL","methods","upload","$refs","file","click","fileChange","e","isDrop","dataTransfer","files","target","$emit","dragover","preventDefault","dragleave","drop","formData","FormData","append","response","fetch","method","body","ok","json","console","error","statusText"],"sources":["/Volumes/Work Data/University At Buffalo Grad/CSE574 Intro Machine Learning/[Bonus] ML model deployment/ml-model/src/components/DragDropImageInput.vue"],"sourcesContent":["<template>\n  <div>\n    <input\n      ref=\"file\"\n      type=\"file\"\n      accept=\"image/*\"\n      @change=\"fileChange\"\n      hidden\n    />\n    <div\n      class=\"drag-drop-zone\"\n      @click=\"upload()\"\n      @dragover=\"dragover\"\n      @dragleave=\"dragleave\"\n      @drop=\"drop\"\n    >\n      <template v-if=\"isDragging\">\n        <div class=\"icon\">\n        </div>\n        <p>Drop to upload</p>\n      </template>\n      <img v-else-if=\"previewImg\" class=\"preview\" :src=\"previewImg\" />\n      <template v-else>\n        <div class=\"icon\">\n        </div>\n        <p>Click to upload</p>\n        <p class=\"sub-text\">or drag and drop image</p>\n      </template>\n    </div>\n  </div>\n</template>\n\n\n\n<script>\nexport default {\n  props: {\n    value: {\n      required: true,\n    },\n  },\n  data() {\n    return {\n      isDragging: false,\n      imageResults: [], // Add this data property to store the received images and strings\n    };\n  },\n  computed: {\n    previewImg() {\n      if (this.value) {\n        return URL.createObjectURL(this.value);\n      }\n      return null;\n    },\n  },\n  methods: {\n    upload() {\n      this.$refs.file.click();\n    },\n    fileChange(e, isDrop = false) {\n      const file = isDrop ? e.dataTransfer.files[0] : e.target.files[0];\n      this.$emit(\"input\", file);\n    },\n    dragover(e) {\n      e.preventDefault();\n      this.isDragging = true;\n    },\n    dragleave() {\n      this.isDragging = false;\n    },\n    async drop(e) {\n      e.preventDefault();\n      this.fileChange(e, true);\n      this.isDragging = false;\n    \n      // Sending the image to the Flask server\n      const formData = new FormData();\n      formData.append(\"image\", this.value);\n      \n      try {\n        // Replace '/predict' with your server URL followed by the API endpoint\n        const response = await fetch(\"https://my-image-server.com/predict\", {\n          method: \"POST\",\n          body: formData,\n        });\n        if (response.ok) {\n          const data = await response.json();\n          // Update the component's data with the received images and strings\n          this.imageResults = data;\n        } \n        else {\n          console.error(\"Error uploading image:\", response.statusText);\n        }\n      } \n      catch (error) {\n        console.error(\"Error uploading image:\", error);\n      }\n    },\n  },\n};\n</script>\n\n\n\n<style scoped>\n.drag-drop-zone {\n  width: 200px;\n  height: 70px;\n  border: 1px solid #e5e5e5;\n  border-radius: 8px;\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n.drag-drop-zone .preview {\n  width: 100%;\n  height: 100%;\n  object-fit: contain;\n}\n.drag-drop-zone .icon {\n  width: 25px;\n  height: 20px;\n}\n.drag-drop-zone .sub-text {\n  font-size: 12px;\n}\n</style>"],"mappings":"AAmCA,eAAe;EACbA,KAAK,EAAE;IACLC,KAAK,EAAE;MACLC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,KAAK;MACjBC,YAAY,EAAE,EAAE,CAAE;IACpB,CAAC;EACH,CAAC;;EACDC,QAAQ,EAAE;IACRC,UAAUA,CAAA,EAAG;MACX,IAAI,IAAI,CAACN,KAAK,EAAE;QACd,OAAOO,GAAG,CAACC,eAAe,CAAC,IAAI,CAACR,KAAK,CAAC;MACxC;MACA,OAAO,IAAI;IACb;EACF,CAAC;EACDS,OAAO,EAAE;IACPC,MAAMA,CAAA,EAAG;MACP,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC;IACzB,CAAC;IACDC,UAAUA,CAACC,CAAC,EAAEC,MAAK,GAAI,KAAK,EAAE;MAC5B,MAAMJ,IAAG,GAAII,MAAK,GAAID,CAAC,CAACE,YAAY,CAACC,KAAK,CAAC,CAAC,IAAIH,CAAC,CAACI,MAAM,CAACD,KAAK,CAAC,CAAC,CAAC;MACjE,IAAI,CAACE,KAAK,CAAC,OAAO,EAAER,IAAI,CAAC;IAC3B,CAAC;IACDS,QAAQA,CAACN,CAAC,EAAE;MACVA,CAAC,CAACO,cAAc,CAAC,CAAC;MAClB,IAAI,CAACnB,UAAS,GAAI,IAAI;IACxB,CAAC;IACDoB,SAASA,CAAA,EAAG;MACV,IAAI,CAACpB,UAAS,GAAI,KAAK;IACzB,CAAC;IACD,MAAMqB,IAAIA,CAACT,CAAC,EAAE;MACZA,CAAC,CAACO,cAAc,CAAC,CAAC;MAClB,IAAI,CAACR,UAAU,CAACC,CAAC,EAAE,IAAI,CAAC;MACxB,IAAI,CAACZ,UAAS,GAAI,KAAK;;MAEvB;MACA,MAAMsB,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC3B,KAAK,CAAC;MAEpC,IAAI;QACF;QACA,MAAM4B,QAAO,GAAI,MAAMC,KAAK,CAAC,qCAAqC,EAAE;UAClEC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEN;QACR,CAAC,CAAC;QACF,IAAIG,QAAQ,CAACI,EAAE,EAAE;UACf,MAAM9B,IAAG,GAAI,MAAM0B,QAAQ,CAACK,IAAI,CAAC,CAAC;UAClC;UACA,IAAI,CAAC7B,YAAW,GAAIF,IAAI;QAC1B,OACK;UACHgC,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEP,QAAQ,CAACQ,UAAU,CAAC;QAC9D;MACF,EACA,OAAOD,KAAK,EAAE;QACZD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}